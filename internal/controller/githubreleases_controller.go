/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"time"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/util/wait"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	webappv1 "csye7125-su24-team14/cve-operator/api/v1"
)

const (
	gitHubReleaseFinalizer = "finalizer.githubrelease.webapp.com"
)

// GitHubReleasesReconciler reconciles a GitHubReleases object
type GitHubReleasesReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=webapp.csye7125-su24-team14,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=webapp.csye7125-su24-team14,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=webapp.csye7125-su24-team14,resources=githubreleases/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GitHubReleases object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GitHubReleasesReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	l := log.FromContext(ctx)
	l.Info("Enter GitHubReleasesReconciler", "req", req)
	releaseInstance := &webappv1.GitHubReleases{}
	err := r.Get(ctx, types.NamespacedName{Name: req.Name, Namespace: req.Namespace}, releaseInstance)
	if err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	if releaseInstance.Spec.Url == "" {
		return ctrl.Result{}, nil
	}
	if releaseInstance.ObjectMeta.DeletionTimestamp.IsZero() {
		// Resource is not being deleted; handle normal processing
		if err := r.addFinalizer(releaseInstance); err != nil {
			return ctrl.Result{}, err
		}

		if err := r.checkAndCreateJob(ctx, r.Client, releaseInstance.Name, releaseInstance.Spec.Url); err != nil {
			return ctrl.Result{}, err
		}
	} else {
		// Resource is being deleted; handle finalization
		if contains(releaseInstance.GetFinalizers(), gitHubReleaseFinalizer) {
			// Delete the associated job
			jobName := releaseInstance.Name + "-web-cve-processor-job"
			err := r.deleteJob(ctx, jobName, req.Namespace)
			if err != nil {
				return ctrl.Result{}, err
			}

			// Remove the finalizer to complete the deletion process
			releaseInstance.SetFinalizers(remove(releaseInstance.GetFinalizers(), gitHubReleaseFinalizer))
			if err := r.Update(ctx, releaseInstance); err != nil {
				return ctrl.Result{}, err
			}
		}
		return ctrl.Result{RequeueAfter: requestTimeout}, nil
	}

	return ctrl.Result{}, nil
}

func (r *GitHubReleasesReconciler) checkAndCreateJob(ctx context.Context, kubeClient client.Client, releaseName string, url string) error {
	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      releaseName + "-web-cve-processor-job",
			Namespace: resourceNamespace,
			Labels: map[string]string{
				"app": "producer-web-cve-processor",
			},
		},
		Spec: batchv1.JobSpec{
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						"app": "producer-web-cve-processor",
					},
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:            releaseName + "-web-cve-processor",
							Image:           "anuragnandre/webapp-cve-producer" + ":" + "latest",
							ImagePullPolicy: corev1.PullAlways,
							// Ports: []corev1.ContainerPort{
							//  {
							//      Name:          "http",
							//      ContainerPort: int32(port),
							//  },
							// },
							EnvFrom: []corev1.EnvFromSource{
								{
									SecretRef: &corev1.SecretEnvSource{
										LocalObjectReference: corev1.LocalObjectReference{
											Name: "producer-job-secret",
										},
									},
								},
							},
							Env: []corev1.EnvVar{
								{
									Name:  "GITHUB_CVE_ZIP_URL",
									Value: url,
								},
							},
							Resources: corev1.ResourceRequirements{
								Requests: corev1.ResourceList{
									corev1.ResourceMemory: resource.MustParse("256Mi"),
									corev1.ResourceCPU:    resource.MustParse("250m"),
								},
								Limits: corev1.ResourceList{
									corev1.ResourceMemory: resource.MustParse("384Mi"),
									corev1.ResourceCPU:    resource.MustParse("375m"),
								},
							},
						},
					},
					RestartPolicy: corev1.RestartPolicyOnFailure,
					ImagePullSecrets: []corev1.LocalObjectReference{
						{
							Name: "producer-docker-secret",
						},
					},
				},
			},
			// BackoffLimit: int32Ptr(3),
		},
	}

	if err := kubeClient.Create(ctx, job); err != nil {
		return fmt.Errorf("failed to create Kubernetes job: %w", err)
	}

	return nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleasesReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&webappv1.GitHubReleases{}).
		Complete(r)
}

func (r *GitHubReleasesReconciler) addFinalizer(instance *webappv1.GitHubReleases) error {
	// Check if the finalizer is already present
	if !contains(instance.GetFinalizers(), gitHubReleaseFinalizer) {
		// Add the finalizer to the list
		instance.SetFinalizers(append(instance.GetFinalizers(), gitHubReleaseFinalizer))
		// Update the resource to reflect the new finalizer
		err := r.Update(context.Background(), instance)
		if err != nil {
			return err
		}
	}
	return nil
}

func remove(slice []string, item string) []string {
	newSlice := []string{}
	for _, s := range slice {
		if s != item {
			newSlice = append(newSlice, s)
		}
	}
	return newSlice
}

func (r *GitHubReleasesReconciler) deleteJob(ctx context.Context, jobName string, namespace string) error {
	job := &batchv1.Job{}
	err := r.Get(ctx, types.NamespacedName{Name: jobName, Namespace: namespace}, job)
	if err != nil {
		if client.IgnoreNotFound(err) != nil {
			return fmt.Errorf("failed to get job: %w", err)
		}
		// Job does not exist
		return nil
	}

	// Add propagation policy for cascading deletion
	deletePolicy := metav1.DeletePropagationForeground
	deleteOptions := client.DeleteOptions{
		PropagationPolicy: &deletePolicy,
	}

	if err := r.Delete(ctx, job, &deleteOptions); err != nil {
		return fmt.Errorf("failed to delete job: %w", err)
	}

	// Wait for the job to be deleted
	err = wait.PollImmediate(time.Second, time.Minute, func() (bool, error) {
		if err := r.Get(ctx, types.NamespacedName{Name: jobName, Namespace: namespace}, &batchv1.Job{}); err != nil {
			if errors.IsNotFound(err) {
				return true, nil
			}
			return false, err
		}
		return false, nil
	})

	if err != nil {
		return fmt.Errorf("failed to wait for job deletion: %w", err)
	}

	return nil
}
